generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  password       String
  name           String?
  role           String          @default("USER")
  subscription   Subscription?
  timezone       String?         @default("UTC")
  bio            String?
  avatar         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  settings       UserSettings?
  posts          Post[]
  socialAccounts SocialAccount[]
  mediaFiles     MediaFile[]
  analytics      Analytics[]     
  teamMembers    TeamMember[]    
}

model Subscription {
  id                String             @id @default(cuid())
  userId           String             @unique
  user             User               @relation(fields: [userId], references: [id])
  planId           String
  plan             Plan               @relation(fields: [planId], references: [id])
  status           String             @default("active") // active, canceled, past_due
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean          @default(false)
  paymentMethod     PaymentMethod?
  invoices          Invoice[]
  usageRecords      UsageRecord[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([userId])
  @@index([planId])
}

model Plan {
  id              String        @id @default(cuid())
  name            String        @unique
  description     String
  price           Float
  interval        String        // monthly, yearly
  features        PlanFeature[]
  subscriptions   Subscription[]
  active          Boolean       @default(true)
  sortOrder       Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  limits          PlanLimit[]
  metadata        Json          @default("{}")

  @@index([name])
}

model PlanFeature {
  id          String   @id @default(cuid())
  planId      String
  plan        Plan     @relation(fields: [planId], references: [id])
  name        String
  description String?
  included    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([planId])
}

model PlanLimit {
  id          String   @id @default(cuid())
  planId      String
  plan        Plan     @relation(fields: [planId], references: [id])
  name        String   // e.g., "social_accounts", "scheduled_posts"
  value       Int      // The limit value
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([planId])
}

model PaymentMethod {
  id             String       @id @default(cuid())
  subscriptionId String       @unique
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  type           String       // card, paypal, etc.
  brand          String?      // visa, mastercard, etc.
  last4          String?      // Last 4 digits for cards
  expiryMonth    Int?        // For cards
  expiryYear     Int?        // For cards
  isDefault      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([subscriptionId])
}

model Invoice {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  amount         Float
  currency       String       @default("USD")
  status         String       // paid, pending, failed
  paidAt         DateTime?
  hostedUrl      String?      // URL to hosted invoice page
  pdfUrl         String?      // URL to PDF invoice
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([subscriptionId])
}

model UsageRecord {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  feature        String       // The feature being tracked
  quantity       Int          // Amount used
  recordedAt     DateTime     @default(now())
  metadata       Json         @default("{}")

  @@index([subscriptionId])
  @@index([feature])
}

model Post {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  caption       String
  scheduledDate DateTime
  hashtags      String?
  visibility    String        @default("public")
  error         String?
  mediaFiles    MediaFile[]   @relation("PostToMediaFile")
  platforms     PostPlatform[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  externalPostId String?      @default("")

  @@index([userId])
  @@index([scheduledDate])
}

model PostPlatform {
  id          String    @id @default(cuid())
  postId      String
  post        Post      @relation(fields: [postId], references: [id])
  platform    String
  status      String    @default("scheduled")
  error       String?
  externalId  String?
  settings    Json      @default("{}")
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([postId])
  @@index([platform])
}

model MediaFile {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  url       String
  type      String
  filename  String
  size      Int
  s3Key     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostToMediaFile")

  @@index([userId])
}

model SocialAccount {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  platform      String
  username      String?
  profileUrl    String?
  accessToken   String
  refreshToken  String?
  followerCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  language           String   @default("en")
  theme              String   @default("light")
  autoSchedule       Boolean  @default(true)
  defaultVisibility  String   @default("public")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Analytics {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  date        DateTime
  platform    String
  reach       Int      @default(0)
  impressions Int      @default(0)
  engagement  Int      @default(0)
  clicks      Int      @default(0)
  shares      Int      @default(0)
  saves       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, date])
  @@index([platform])
}

model TeamMember {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  name       String
  email      String   @unique
  role       String   @default("VIEWER")
  avatar     String?
  lastActive DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}