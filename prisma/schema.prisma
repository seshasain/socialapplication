// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  password        String
  name            String?
  role            String          @default("USER")
  subscription    String          @default("free")
  timezone        String?         @default("UTC")
  bio            String?
  avatar         String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  settings        UserSettings?
  posts           Post[]
  socialAccounts  SocialAccount[]
  teamMembers     TeamMember[]
  mediaFiles      MediaFile[]
  analytics       Analytics[]
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  language           String   @default("en")
  theme              String   @default("light")
  autoSchedule       Boolean  @default(true)
  defaultVisibility  String   @default("public")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model SocialAccount {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  platform      String
  username      String?
  profileUrl    String?
  accessToken   String
  refreshToken  String?
  followerCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model TeamMember {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  name       String
  email      String   @unique
  role       String   @default("VIEWER")
  avatar     String?
  lastActive DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}

model MediaFile {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  url       String
  type      String   // 'image' or 'video'
  filename  String
  size      Int
  s3Key     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostToMediaFile")

  @@index([userId])
}

model Post {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  caption       String
  scheduledDate DateTime
  platform      String
  hashtags      String?
  visibility    String      @default("public")
  status        String      @default("scheduled")
  error         String?
  mediaFiles    MediaFile[] @relation("PostToMediaFile")
  engagementRate Float?     @default(0)
  likes         Int?        @default(0)
  comments      Int?        @default(0)
  shares        Int?        @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  externalPostId String?    @default("")
  platformSettings PlatformSettings[]

  @@index([userId, status])
  @@index([scheduledDate])
}

model Analytics {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  date        DateTime
  platform    String
  reach       Int      @default(0)
  impressions Int      @default(0)
  engagement  Int      @default(0)
  clicks      Int      @default(0)
  shares      Int      @default(0)
  saves       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, date])
  @@index([platform])
}
model PlatformSettings{
  id String @id @default(cuid())
  platform String
  settings Json @default("{}")
  post Post @relation(fields: [postId], references:[id])
  postId String
}